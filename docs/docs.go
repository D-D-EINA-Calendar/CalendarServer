// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/availableHours/": {
            "get": {
                "description": "List all the hours remaining for creaiting an entrie on the schedule",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "titulacion de las horas a obtener",
                        "name": "titulacion",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "curso de las horas a obtener",
                        "name": "curso",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "grupo de las horas a obtener",
                        "name": "grupo",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.AvailableHours"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorHttp"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/handlers.ErrorHttp"
                        }
                    }
                }
            }
        },
        "/newEntry/": {
            "post": {
                "description": "Requesting a new entry for the scheduler. The entry will be definied by the initial hour\nand the ending hour, adintional info must be indicated depending of the kind of hours\nthe kinds of subject hours are:\n- Theorical = 1\n- Practices = 2\n- Exercises = 3",
                "produces": [
                    "text/plain"
                ],
                "parameters": [
                    {
                        "description": "Entry to create",
                        "name": "entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.EntryDTO"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Receive the date of the latests entry modification with format dd/mm/aaaa"
                    }
                }
            }
        },
        "/ping/": {
            "get": {
                "description": "Response \"pong\" if the server is currrently available",
                "produces": [
                    "text/plain"
                ],
                "responses": {
                    "200": {
                        "description": "Returns \"pong\" "
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.AvailableHours": {
            "type": "object",
            "properties": {
                "kind": {
                    "type": "integer"
                },
                "max": {
                    "type": "integer"
                },
                "remaining": {
                    "type": "integer"
                },
                "subject": {
                    "type": "string"
                }
            }
        },
        "handlers.EntryDTO": {
            "type": "object",
            "properties": {
                "endHour": {
                    "type": "integer"
                },
                "endMin": {
                    "type": "integer"
                },
                "grupo": {
                    "type": "string"
                },
                "initHour": {
                    "type": "integer"
                },
                "initMin": {
                    "type": "integer"
                },
                "kind": {
                    "type": "integer"
                },
                "room": {
                    "type": "string"
                },
                "semana": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                }
            }
        },
        "handlers.ErrorHttp": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
