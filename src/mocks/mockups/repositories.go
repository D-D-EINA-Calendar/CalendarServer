// Code generated by MockGen. DO NOT EDIT.
// Source: src/internal/core/ports/repositories.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	domain "github.com/D-D-EINA-Calendar/CalendarServer/src/internal/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockSchedulerRepository is a mock of SchedulerRepository interface.
type MockSchedulerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerRepositoryMockRecorder
}

// MockSchedulerRepositoryMockRecorder is the mock recorder for MockSchedulerRepository.
type MockSchedulerRepositoryMockRecorder struct {
	mock *MockSchedulerRepository
}

// NewMockSchedulerRepository creates a new mock instance.
func NewMockSchedulerRepository(ctrl *gomock.Controller) *MockSchedulerRepository {
	mock := &MockSchedulerRepository{ctrl: ctrl}
	mock.recorder = &MockSchedulerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSchedulerRepository) EXPECT() *MockSchedulerRepositoryMockRecorder {
	return m.recorder
}

// CreateNewEntry mocks base method.
func (m *MockSchedulerRepository) CreateNewEntry(arg0 domain.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewEntry", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewEntry indicates an expected call of CreateNewEntry.
func (mr *MockSchedulerRepositoryMockRecorder) CreateNewEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewEntry", reflect.TypeOf((*MockSchedulerRepository)(nil).CreateNewEntry), arg0)
}

// DeleteAllEntries mocks base method.
func (m *MockSchedulerRepository) DeleteAllEntries(terna domain.DegreeSet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllEntries", terna)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllEntries indicates an expected call of DeleteAllEntries.
func (mr *MockSchedulerRepositoryMockRecorder) DeleteAllEntries(terna interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllEntries", reflect.TypeOf((*MockSchedulerRepository)(nil).DeleteAllEntries), terna)
}

// DeleteEntry mocks base method.
func (m *MockSchedulerRepository) DeleteEntry(arg0 domain.Entry) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntry", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEntry indicates an expected call of DeleteEntry.
func (mr *MockSchedulerRepositoryMockRecorder) DeleteEntry(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntry", reflect.TypeOf((*MockSchedulerRepository)(nil).DeleteEntry), arg0)
}

// GetAvailableHours mocks base method.
func (m *MockSchedulerRepository) GetAvailableHours(arg0 domain.DegreeSet) ([]domain.AvailableHours, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableHours", arg0)
	ret0, _ := ret[0].([]domain.AvailableHours)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableHours indicates an expected call of GetAvailableHours.
func (mr *MockSchedulerRepositoryMockRecorder) GetAvailableHours(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableHours", reflect.TypeOf((*MockSchedulerRepository)(nil).GetAvailableHours), arg0)
}

// GetEntries mocks base method.
func (m *MockSchedulerRepository) GetEntries(arg0 domain.DegreeSet) ([]domain.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntries", arg0)
	ret0, _ := ret[0].([]domain.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEntries indicates an expected call of GetEntries.
func (mr *MockSchedulerRepositoryMockRecorder) GetEntries(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntries", reflect.TypeOf((*MockSchedulerRepository)(nil).GetEntries), arg0)
}

// ListAllDegrees mocks base method.
func (m *MockSchedulerRepository) ListAllDegrees() ([]domain.DegreeDescription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllDegrees")
	ret0, _ := ret[0].([]domain.DegreeDescription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllDegrees indicates an expected call of ListAllDegrees.
func (mr *MockSchedulerRepositoryMockRecorder) ListAllDegrees() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllDegrees", reflect.TypeOf((*MockSchedulerRepository)(nil).ListAllDegrees))
}

// MockUploadDataRepository is a mock of UploadDataRepository interface.
type MockUploadDataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUploadDataRepositoryMockRecorder
}

// MockUploadDataRepositoryMockRecorder is the mock recorder for MockUploadDataRepository.
type MockUploadDataRepositoryMockRecorder struct {
	mock *MockUploadDataRepository
}

// NewMockUploadDataRepository creates a new mock instance.
func NewMockUploadDataRepository(ctrl *gomock.Controller) *MockUploadDataRepository {
	mock := &MockUploadDataRepository{ctrl: ctrl}
	mock.recorder = &MockUploadDataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadDataRepository) EXPECT() *MockUploadDataRepositoryMockRecorder {
	return m.recorder
}

// CreateNewDegree mocks base method.
func (m *MockUploadDataRepository) CreateNewDegree(id int, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewDegree", id, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewDegree indicates an expected call of CreateNewDegree.
func (mr *MockUploadDataRepositoryMockRecorder) CreateNewDegree(id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewDegree", reflect.TypeOf((*MockUploadDataRepository)(nil).CreateNewDegree), id, name)
}

// CreateNewGroup mocks base method.
func (m *MockUploadDataRepository) CreateNewGroup(group, yearCode int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewGroup", group, yearCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewGroup indicates an expected call of CreateNewGroup.
func (mr *MockUploadDataRepositoryMockRecorder) CreateNewGroup(group, yearCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewGroup", reflect.TypeOf((*MockUploadDataRepository)(nil).CreateNewGroup), group, yearCode)
}

// CreateNewHour mocks base method.
func (m *MockUploadDataRepository) CreateNewHour(available, total, subjectCode, groupCode, kind int, group, week string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewHour", available, total, subjectCode, groupCode, kind, group, week)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewHour indicates an expected call of CreateNewHour.
func (mr *MockUploadDataRepositoryMockRecorder) CreateNewHour(available, total, subjectCode, groupCode, kind, group, week interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewHour", reflect.TypeOf((*MockUploadDataRepository)(nil).CreateNewHour), available, total, subjectCode, groupCode, kind, group, week)
}

// CreateNewSubject mocks base method.
func (m *MockUploadDataRepository) CreateNewSubject(id int, name string, degreeCode int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewSubject", id, name, degreeCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewSubject indicates an expected call of CreateNewSubject.
func (mr *MockUploadDataRepositoryMockRecorder) CreateNewSubject(id, name, degreeCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewSubject", reflect.TypeOf((*MockUploadDataRepository)(nil).CreateNewSubject), id, name, degreeCode)
}

// CreateNewYear mocks base method.
func (m *MockUploadDataRepository) CreateNewYear(year, degreeCode int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewYear", year, degreeCode)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewYear indicates an expected call of CreateNewYear.
func (mr *MockUploadDataRepositoryMockRecorder) CreateNewYear(year, degreeCode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewYear", reflect.TypeOf((*MockUploadDataRepository)(nil).CreateNewYear), year, degreeCode)
}

// RawExec mocks base method.
func (m *MockUploadDataRepository) RawExec(exec string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawExec", exec)
	ret0, _ := ret[0].(error)
	return ret0
}

// RawExec indicates an expected call of RawExec.
func (mr *MockUploadDataRepositoryMockRecorder) RawExec(exec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawExec", reflect.TypeOf((*MockUploadDataRepository)(nil).RawExec), exec)
}
